module gcore-spoofax

imports
  
   Layout
  Names
  Literals
  ConstructPattern
  PathMacro
   MatchPattern
   SolutionModifiers
  Expressions

context-free start-symbols
  
  Start

context-free syntax

  Start = Query

  Query = GraphQuery
  Query = TabularGraphQuery

  GraphQuery.BasicQuery = <
    <ConstructClause>
    <PathClause?>
    <MatchWhereClause+>
  >

  GraphQuery.Union     = <<GraphOrGraphQuery> UNION <GraphOrGraphQuery>> {case-insensitive}
  GraphQuery.Minus     = <<GraphOrGraphQuery> MINUS <GraphOrGraphQuery>> {case-insensitive}
  GraphQuery.Intersect = <<GraphOrGraphQuery> INTERSECT <GraphOrGraphQuery>> {case-insensitive}

  GraphOrGraphQuery       = GraphQuery
  GraphOrGraphQuery.Graph = GraphName

  TabularGraphQuery.TabularGraphQuery = <
    <SelectClause>
    <PathClause?>
    <MatchWhereClause+>
    <GroupByClause?>
    <HavingClause?>
    <OrderByClause?>
    <LimitOffsetClauses?>
  >

  ConstructClause.Construct = <CONSTRUCT <ConstructPattern>> {case-insensitive}
  SelectClause.Select = <SELECT <{ExpAsVar ", "}+>> {case-insensitive}
  PathClause.Path = <<{PathMacroDeclaration " \n"}+>>
  MatchWhereClause.Match = <MATCH <MatchPatternWithFilters><OptionalMatchClause*>> {case-insensitive}
  OptionalMatchClause.OptionalMatchClause = <OPTIONAL <MatchPatternWithFilters>> {case-insensitive}

  MatchPatternWithFilters.MatchPatternWithFilters = <
    <FullMatchPattern>
    <Location?>
    <WhereClause?>
  >

  WhereClause.Where = <WHERE <Exp>> {case-insensitive}

  Location.Location = < ON <GraphOrSubQuery>> {case-insensitive}

  GraphOrSubQuery          = GraphName
  GraphOrSubQuery.SubQuery = <( <GraphQuery> )>
