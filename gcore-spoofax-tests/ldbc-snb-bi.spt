module ldbc-snb-bi // for query specifications, see https://github.com/ldbc/ldbc_snb_docs

language gcore-spoofax

/*
  For all the Persons born after a certain date , find all the strangers they interacted with, where
  strangers are Persons that do not know each other. There is no restriction on the date that strangers
  were born.
  Consider only strangers that are members of Forums tagged with a Tag of tagClass1 (direct
  children not transitive) AND members of Forums tagged with a Tag of tagClass2 (direct children
  not transitive). The tags may be attached to the same Forum or they may be attached to different
  Forums.
  Interaction is defined as follows: if Person A replies to a Message (Post or Comment) by another
  Person B, there is an “interacted with” relationship from A to B. Note that the “interacted with”
  relationship is directed.
  For each Person, count the number of strangers they interacted with and total number of times
  they interacted with them.
*/
test Query 19 [[

  SELECT person.id
       , COUNT(DISTINCT stranger) AS strangersCount
       , COUNT(comment1) + COUNT(comment2) AS interactionCount
   MATCH (person:Person)
OPTIONAL (person)<-[:hasCreator]-(comment1:Comment)-[:replyOf]->(:Message)-[:hasCreator]->(stranger)
OPTIONAL (stranger)<-[:hasCreator]-(comment2:Comment)-[:replyOf]->(:Message)-[:hasCreator]->(person)
   WHERE person.birthday > ?
     AND person <> stranger
     AND NOT EXISTS ( SELECT e MATCH (person)-[e:knows]-(stranger) )
     AND stranger IS NULL OR ( EXISTS ( SELECT tag
                                         MATCH (stranger:Person) <-[:hasMember]- (forum:Forum)
                                             , (forum) -[:hasTag]-> (:Tag) -[:hasType]-> (tagClass:TagClass)
                                         WHERE tagClass.name = ?
                                      ) AND
                               EXISTS ( SELECT tag
                                        MATCH (stranger:Person) <-[:hasMember]- (forum:Forum)
                                            , (forum) -[:hasTag]-> (:Tag) -[:hasType]-> (tagClass:TagClass)
                                        WHERE tagClass.name = ?
                                      )
                             )
ORDER BY interactionCount DESC,
         person.id ASC
   LIMIT 100

]]

/*
  Given two Persons, find a single weighted shortest paths between these two Persons, in the sub-
  graph induced by the knows relationship.
  The nodes in the path are Persons, and the weight of a  path is the sum of weights between
  every pair of consecutive Person nodes in the path. The weight for a pair of Persons is
  calculated based on their interactions:
    • Every reply (by one of the Persons) to a Post (by the other Person) contributes 1.0.
    • Every reply (by one of the Persons) to a Comment (by the other Person) contributes 0.5.
  Only consider Messages that were created in a Forum that was created within the timeframe
  [startDate, endDate] .
  Return all the paths with shortest length, and their weights
*/
test Query 25 [[

CONSTRUCT (p1) -/path/-> (p2)
     PATH reply_to_post = (personA) <-[:has_creator]- (message1:Comment) -[:reply_of]-> (message2:Post) -[:has_creator]-> (personB)
                           WHERE EXISTS ( SELECT forum
                                          MATCH (message1) -[:hasContainer]-> (forum:Forum)
                                              , (message2) -[:hasContainer]-> (forum)
                                          WHERE ? <= forum.creationDate AND forum.creationDate <= ?
                                       )
     PATH reply_to_comment = (personA) <-[:has_creator]- (message1:Comment) -[:reply_of]-> (message2:Comment) -[:has_creator]-> (personB)
                             WHERE EXISTS ( SELECT forum
                                             MATCH (message1) -[:hasContainer]-> (forum:Forum)
                                              , (message2) -[:hasContainer]-> (forum)
                                             WHERE ? <= forum.creationDate AND forum.creationDate <= ?
                                          )
     PATH weighted_knows = (personA) -[:knows]-> (personB)
                           COST 1.0 * ( SELECT COUNT(*) MATCH (personA) -/<~reply_to_post>/-> (personB) )
                              + 1.0 * ( SELECT COUNT(*) MATCH (personB) -/<~reply_to_post>/-> (personA) )
                              + 0.5 * ( SELECT COUNT(*) MATCH (personA) -/<~reply_to_comment>/-> (personB) )
                              + 0.5 * ( SELECT COUNT(*) MATCH (personB) -/<~reply_to_comment>/-> (personA) )
    MATCH (p1:Person) -/SHORTEST path <~weighted_knows*>/-> (p2:Person)
    WHERE p1.id = ?
      AND p2.id = ?

]]